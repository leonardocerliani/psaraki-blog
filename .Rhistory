# mutate(sub = paste0("sub_",row_number())) %>%
mutate(sub = paste0("sub_",row_number(),"_",task)) %>%
relocate(sub) %>%
ungroup()
# plant an outlier
df[c(30,60,90),] %<>%  mutate(across(BA44:IPL, ~ .x + 4))
# define a reusable function to print the table
show_table <- function(df) {
BuYlRd <- function(x) {
rgb(colorRamp(c("#7fb7d7", "#ffffbf", "#fc8d59"))(x), maxColorValue = 255)
}
reactable(
df,
resizable = T,
# selection = "multiple",
# onClick = "select",
defaultColDef = colDef(
style = function(value) {
vals <- df %>% select(where(is.numeric))
if (!is.numeric(value)) return()
normalized <- (value - min(vals)) / (max(vals) - min(vals))
color <- BuYlRd(normalized)
list(background = color)
},
format = colFormat(digits = 2), minWidth = 50
),
style = list(fontFamily = "Arial narrow", fontSize = "13px")
)
}
df %>% show_table()
df_mean <- df %>%
group_by(task) %>%
summarise(
across(where(is.numeric), ~ mean(.x, na.rm = T)),
.groups = "drop"
)
# df_mean %>% show_table()
# pivot to group all the brain regions in a variable
t_df_mean <- df_mean %>%
pivot_longer(
cols = !task, names_to = "JU", values_to = "Zmean"
) %>%
pivot_wider(
names_from = task, values_from = Zmean
)
t_df_mean %>% show_table()
draw_spiderplot <- function(t_df_mean) {
p <- plot_ly(
type = 'scatterpolar', mode = 'lines+markers', fill = 'toself', opacity = 0.5
) %>% config(displayModeBar = F)
df_vals <- t_df_mean %>% select(-JU)
ticks <-  t_df_mean$JU %>% as.character()
groups <- df_vals %>% colnames()
for (ith_col in 1:length(groups)) {
onecol <- df_vals[,ith_col] %>% pull()
p <- p %>%
add_trace(
r = c(onecol, onecol[1]),
theta = c(ticks, ticks[1]),
name = groups[ith_col],
line = list(
dash = "solid",
shape = "spline",
smoothing = 1,
width = 2
)
) %>% layout(font = list(family = "arial narrow"))
}
return(p)
}
draw_spiderplot(t_df_mean)
do_dimred <- function(df, method, compX, compY, maxcomp=3) {
# nsub <- length(df$task)
vals <- df %>% select(!task) %>% as.matrix()
switch(method,
mds = {
mds <- cmdscale(dist(vals), eig = T, k = maxcomp)
pcs <- list(mds$points[,compX], mds$points[,compY])
},
umap = {
u <- umap(dist(vals), n_components = maxcomp)
pcs <- list(u[,compX], u[,compY])
},
tsne = {
tsne <- Rtsne(dist(vals), dims = 3, perplexity = 10)
pcs <- list(tsne$Y[,compX], tsne$Y[,compY])
}
)
df_lowdim <- tibble(
task = df$task,
sub = df$sub,
pc1 = pcs[[1]],
pc2 = pcs[[2]],
)
plot_ly(type = 'scatter', mode = 'markers', source = "A") %>%
add_trace(
data = df_lowdim,
x = ~pc1,
y = ~pc2,
customdata = ~sub,
color = ~task,
text = ~sub,
hoverinfo = 'text'
# hovertemplate = paste('%{text}')
) %>%
layout(dragmode = "lasso") %>%
config(displayModeBar = F)
}
do_dimred(df,"umap", compX = 1, compY = 2)
do_dimred <- function(df, method, compX, compY, maxcomp=3) {
# nsub <- length(df$task)
vals <- df %>% select(!task) %>% as.matrix()
switch(method,
mds = {
mds <- cmdscale(dist(vals), eig = T, k = maxcomp)
pcs <- list(mds$points[,compX], mds$points[,compY])
},
umap = {
u <- umap(dist(vals), n_components = maxcomp)
pcs <- list(u[,compX], u[,compY])
},
tsne = {
tsne <- Rtsne(dist(vals), dims = 3, perplexity = 10)
pcs <- list(tsne$Y[,compX], tsne$Y[,compY])
}
)
df_lowdim <- tibble(
task = df$task,
sub = df$sub,
pc1 = pcs[[1]],
pc2 = pcs[[2]],
)
plot_ly(type = 'scatter', mode = 'markers', source = "A") %>%
add_trace(
data = df_lowdim,
x = ~pc1,
y = ~pc2,
customdata = ~sub,
color = ~task,
text = ~sub,
hoverinfo = 'text'
# hovertemplate = paste('%{text}')
) %>%
layout(dragmode = "lasso") %>%
config(displayModeBar = F)
}
do_dimred(df,"mds", compX = 1, compY = 2)
library(magrittr)
library(shiny)
library(dplyr)
library(tidyr)
library(tibble)
library(reactable)
library(plotly)
library(ggplot2)
library(heatmaply)
library(uwot)
library(Rtsne)
library(DT)
options(digits = 2)
N = 30
A <- function(mu) rnorm(N, mean = mu)
df <- tibble(
task = c(rep("AAA",N), rep("BBB",N), rep("CCC",N)) %>% as.factor(),
BA44  = c(A(2), A(2), A(5)),
BA45 = c(A(2), A(2), A(5)),
BA46  = c(A(2), A(3), A(5)),
V1  = c(A(2), A(2), A(2)),
V4  = c(A(2), A(2), A(2)),
V5  = c(A(2), A(2), A(2)),
SI   = c(A(5), A(2), A(2)),
SPL  = c(A(5), A(2), A(2)),
IPL  = c(A(5), A(3), A(2))
) %>%
group_by(task) %>%    # assign participant numbers
# mutate(sub = paste0("sub_",row_number())) %>%
mutate(sub = paste0("sub_",row_number(),"_",task)) %>%
relocate(sub) %>%
ungroup()
# # plant an outlier
# df[c(30,60,90),] %<>%  mutate(across(BA44:IPL, ~ .x + 4))
# define a reusable function to print the table
show_table <- function(df) {
BuYlRd <- function(x) {
rgb(colorRamp(c("#7fb7d7", "#ffffbf", "#fc8d59"))(x), maxColorValue = 255)
}
reactable(
df,
resizable = T,
# selection = "multiple",
# onClick = "select",
defaultColDef = colDef(
style = function(value) {
vals <- df %>% select(where(is.numeric))
if (!is.numeric(value)) return()
normalized <- (value - min(vals)) / (max(vals) - min(vals))
color <- BuYlRd(normalized)
list(background = color)
},
format = colFormat(digits = 2), minWidth = 50
),
style = list(fontFamily = "Arial narrow", fontSize = "13px")
)
}
df %>% show_table()
df_mean <- df %>%
group_by(task) %>%
summarise(
across(where(is.numeric), ~ mean(.x, na.rm = T)),
.groups = "drop"
)
# df_mean %>% show_table()
# pivot to group all the brain regions in a variable
t_df_mean <- df_mean %>%
pivot_longer(
cols = !task, names_to = "JU", values_to = "Zmean"
) %>%
pivot_wider(
names_from = task, values_from = Zmean
)
t_df_mean %>% show_table()
draw_spiderplot <- function(t_df_mean) {
p <- plot_ly(
type = 'scatterpolar', mode = 'lines+markers', fill = 'toself', opacity = 0.5
) %>% config(displayModeBar = F)
df_vals <- t_df_mean %>% select(-JU)
ticks <-  t_df_mean$JU %>% as.character()
groups <- df_vals %>% colnames()
for (ith_col in 1:length(groups)) {
onecol <- df_vals[,ith_col] %>% pull()
p <- p %>%
add_trace(
r = c(onecol, onecol[1]),
theta = c(ticks, ticks[1]),
name = groups[ith_col],
line = list(
dash = "solid",
shape = "spline",
smoothing = 1,
width = 2
)
) %>% layout(font = list(family = "arial narrow"))
}
return(p)
}
draw_spiderplot(t_df_mean)
do_dimred <- function(df, method, compX, compY, maxcomp=3) {
# nsub <- length(df$task)
vals <- df %>% select(!task) %>% as.matrix()
switch(method,
mds = {
mds <- cmdscale(dist(vals), eig = T, k = maxcomp)
pcs <- list(mds$points[,compX], mds$points[,compY])
},
umap = {
u <- umap(dist(vals), n_components = maxcomp)
pcs <- list(u[,compX], u[,compY])
},
tsne = {
tsne <- Rtsne(dist(vals), dims = 3, perplexity = 10)
pcs <- list(tsne$Y[,compX], tsne$Y[,compY])
}
)
df_lowdim <- tibble(
task = df$task,
sub = df$sub,
pc1 = pcs[[1]],
pc2 = pcs[[2]],
)
plot_ly(type = 'scatter', mode = 'markers', source = "A") %>%
add_trace(
data = df_lowdim,
x = ~pc1,
y = ~pc2,
customdata = ~sub,
color = ~task,
text = ~sub,
hoverinfo = 'text'
# hovertemplate = paste('%{text}')
) %>%
layout(dragmode = "lasso") %>%
config(displayModeBar = F)
}
do_dimred(df,"mds", compX = 1, compY = 2)
do_dimred <- function(df, method, compX, compY, maxcomp=3) {
# nsub <- length(df$task)
vals <- df %>% select(!task) %>% as.matrix()
switch(method,
mds = {
mds <- cmdscale(dist(vals), eig = T, k = maxcomp)
pcs <- list(mds$points[,compX], mds$points[,compY])
},
umap = {
u <- umap(dist(vals), n_components = maxcomp)
pcs <- list(u[,compX], u[,compY])
},
tsne = {
tsne <- Rtsne(dist(vals), dims = 3, perplexity = 10)
pcs <- list(tsne$Y[,compX], tsne$Y[,compY])
}
)
df_lowdim <- tibble(
task = df$task,
sub = df$sub,
pc1 = pcs[[1]],
pc2 = pcs[[2]],
)
plot_ly(type = 'scatter', mode = 'markers', source = "A") %>%
add_trace(
data = df_lowdim,
x = ~pc1,
y = ~pc2,
customdata = ~sub,
color = ~task,
text = ~sub,
hoverinfo = 'text'
# hovertemplate = paste('%{text}')
) %>%
layout(dragmode = "lasso") %>%
config(displayModeBar = F)
}
do_dimred(df,"umap", compX = 1, compY = 2)
# plant an outlier
gf <- df
gf[c(29,30,59,60,89,90),] %<>%  mutate(across(BA44:IPL, ~ .x + 4))
do_dimred(gf,"umap", compX = 1, compY = 2)
# plant an outlier
gf <- df
gf[c(30,60,90),] %<>%  mutate(across(BA44:IPL, ~ .x + 4))
do_dimred(gf,"umap", compX = 1, compY = 2)
# plant an outlier
gf <- df
gf[c(29,30,59,60,89,90),] %<>%  mutate(across(BA44:IPL, ~ .x + 4))
do_dimred(gf,"umap", compX = 1, compY = 2)
# plant an outlier
gf <- df
gf[c(29,30,59,60,89,90),] %<>%  mutate(across(BA44:IPL, ~ .x + 4))
do_dimred(gf,"umap", compX = 1, compY = 2)
gf %>% show_table()
quarto_preview()
# plant an outlier
gf <- df
gf[c(29,30,89,90),] %<>%  mutate(across(BA44:IPL, ~ .x + 4))
do_dimred(gf,"umap", compX = 1, compY = 2)
gf %>% show_table()
# plant an outlier
gf <- df
gf[c(59,60),] %<>%  mutate(across(BA44:IPL, ~ .x + 4))
do_dimred(gf,"umap", compX = 1, compY = 2)
gf %>% show_table()
# plant an outlier
gf <- df
gf[c(29,30,59,60,89,90),] %<>%  mutate(across(BA44:IPL, ~ .x + 4))
do_dimred(gf,"umap", compX = 1, compY = 2)
gf %>% show_table()
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
library(magrittr)
library(shiny)
library(dplyr)
library(tidyr)
library(tibble)
library(reactable)
library(plotly)
library(ggplot2)
library(heatmaply)
library(uwot)
library(Rtsne)
library(DT)
options(digits = 2)
quarto_preview()
library(quarto);quarto_preview()
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
set.seed(124)
library(magrittr)
library(shiny)
library(dplyr)
library(tidyr)
library(tibble)
library(reactable)
library(plotly)
library(ggplot2)
library(heatmaply)
library(uwot)
library(Rtsne)
library(DT)
options(digits = 2)
N = 30
A <- function(mu) rnorm(N, mean = mu)
df <- tibble(
task = c(rep("AAA",N), rep("BBB",N), rep("CCC",N)) %>% as.factor(),
BA44  = c(A(2), A(2), A(5)),
BA45 = c(A(2), A(2), A(5)),
BA46  = c(A(2), A(3), A(5)),
V1  = c(A(2), A(2), A(2)),
V4  = c(A(2), A(2), A(2)),
V5  = c(A(2), A(2), A(2)),
SI   = c(A(5), A(2), A(2)),
SPL  = c(A(5), A(2), A(2)),
IPL  = c(A(5), A(3), A(2))
) %>%
group_by(task) %>%    # assign participant numbers
# mutate(sub = paste0("sub_",row_number())) %>%
mutate(sub = paste0("sub_",row_number(),"_",task)) %>%
relocate(sub) %>%
ungroup()
# # plant an outlier
# df[c(30,60,90),] %<>%  mutate(across(BA44:IPL, ~ .x + 4))
# define a reusable function to print the table
show_table <- function(df) {
BuYlRd <- function(x) {
rgb(colorRamp(c("#7fb7d7", "#ffffbf", "#fc8d59"))(x), maxColorValue = 255)
}
reactable(
df,
resizable = T,
# selection = "multiple",
# onClick = "select",
defaultColDef = colDef(
style = function(value) {
vals <- df %>% select(where(is.numeric))
if (!is.numeric(value)) return()
normalized <- (value - min(vals)) / (max(vals) - min(vals))
color <- BuYlRd(normalized)
list(background = color)
},
format = colFormat(digits = 2), minWidth = 50
),
style = list(fontFamily = "Arial narrow", fontSize = "13px")
)
}
df %>% show_table()
df_mean <- df %>%
group_by(task) %>%
summarise(
across(where(is.numeric), ~ mean(.x, na.rm = T)),
.groups = "drop"
)
# df_mean %>% show_table()
# pivot to group all the brain regions in a variable
t_df_mean <- df_mean %>%
pivot_longer(
cols = !task, names_to = "JU", values_to = "Zmean"
) %>%
pivot_wider(
names_from = task, values_from = Zmean
)
t_df_mean %>% show_table()
draw_spiderplot <- function(t_df_mean) {
p <- plot_ly(
type = 'scatterpolar', mode = 'lines+markers', fill = 'toself', opacity = 0.5
) %>% config(displayModeBar = F)
df_vals <- t_df_mean %>% select(-JU)
ticks <-  t_df_mean$JU %>% as.character()
groups <- df_vals %>% colnames()
for (ith_col in 1:length(groups)) {
onecol <- df_vals[,ith_col] %>% pull()
p <- p %>%
add_trace(
r = c(onecol, onecol[1]),
theta = c(ticks, ticks[1]),
name = groups[ith_col],
line = list(
dash = "solid",
shape = "spline",
smoothing = 1,
width = 2
)
) %>% layout(font = list(family = "arial narrow"))
}
return(p)
}
draw_spiderplot(t_df_mean)
do_dimred <- function(df, method, compX, compY, maxcomp=3) {
# nsub <- length(df$task)
vals <- df %>% select(!task) %>% as.matrix()
switch(method,
mds = {
mds <- cmdscale(dist(vals), eig = T, k = maxcomp)
pcs <- list(mds$points[,compX], mds$points[,compY])
},
umap = {
u <- umap(dist(vals), n_components = maxcomp)
pcs <- list(u[,compX], u[,compY])
},
tsne = {
tsne <- Rtsne(dist(vals), dims = 3, perplexity = 10)
pcs <- list(tsne$Y[,compX], tsne$Y[,compY])
}
)
df_lowdim <- tibble(
task = df$task,
sub = df$sub,
pc1 = pcs[[1]],
pc2 = pcs[[2]],
)
plot_ly(type = 'scatter', mode = 'markers', source = "A") %>%
add_trace(
data = df_lowdim,
x = ~pc1,
y = ~pc2,
customdata = ~sub,
color = ~task,
text = ~sub,
hoverinfo = 'text'
# hovertemplate = paste('%{text}')
) %>%
layout(dragmode = "lasso") %>%
config(displayModeBar = F)
}
do_dimred(df,"umap", compX = 1, compY = 2)
quarto_render()
