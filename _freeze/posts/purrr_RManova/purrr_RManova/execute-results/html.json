{
  "hash": "8cf611e41ef9233f5a4c3e5ac507f722",
  "result": {
    "markdown": "---\ntitle: \"How to replace for loops using `purrr::map`\"\nauthor: \"LC\"\ndate: \"2022-12-26\"\ncategories: [purrr]\nimage: \"magkaki.jpg\"\nexecute:\n  echo: true\n\n---\n\n\n\n## Introduction\n\nIn many cases you need to repeat the same action across multiple objects, for instance loading many files, or computing summary statistics across many vectors of observations. Instead of repeating the same operation manually for every object - which is not only time consuming, but especially prone to mistakes - you can use `for` loops.\n\nHowever `for` can be quite verbose, and especially in case you need to nest them - i.e. running a loop inside a loop - it can be difficult to inspect the code for errors during the analysis and especially in the future.\n\nBase R already provides some functions to avoid the creation of `for` loops, with the [family of `apply` functions](https://www.guru99.com/r-apply-sapply-tapply.html). However sometimes the syntax can be different across functions, and still a bit verbose.\n\nThe [tidyverse](https://www.tidyverse.org/) provides functions that help getting rid of `for` loops for good using the [`purrr`](https://purrr.tidyverse.org/) package. Below there is just an example. More details can be found in the [iteration chapter of R for Data Science](https://r4ds.had.co.nz/iteration.html) and in the [functionals chapter of Advanced R](https://adv-r.hadley.nz/functionals.html)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(kableExtra)\nlibrary(DT)\noptions(digits=2)\n```\n:::\n\n\n\nLet's say you collected data in 8 different runs of an experiment. For instance the time, in seconds, spent freezing, running or grooming in 10 participants after a given stimulus in each subsequent run.\n\nFor our example we will create some random data. The code below creates 8 dataframes with 10 observations for three distinct variables. It already uses the `map` function that we are going to explain later, so for now you can just disregard it, and come back later to understand what it does as an excercise.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1:8 %>% map( function(x) {\n  tibble(\n    SUBID = map(1:10, ~ paste0(\"sub_\",.x) ) %>% unlist(),\n    freezing = runif(10)*10 * log(x+1),\n    running = runif(10)*10,\n    grooming = runif(10)*10\n  ) %>%\n    write_csv(paste0(\"run_\",x,\".csv\"))\n})\n```\n:::\n\n\nWe obtain 8 csv files with our data. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyfiles <- list.files(pattern = \".csv\", full.names = T)\nmyfiles\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"./run_1.csv\" \"./run_2.csv\" \"./run_3.csv\" \"./run_4.csv\" \"./run_5.csv\"\n[6] \"./run_6.csv\" \"./run_7.csv\" \"./run_8.csv\"\n```\n:::\n\n```{.r .cell-code}\nread.csv(\"run_1.csv\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    SUBID freezing running grooming\n1   sub_1     3.40   0.438      4.1\n2   sub_2     6.49   5.871      7.5\n3   sub_3     2.95   7.872      6.8\n4   sub_4     4.72   0.678      1.4\n5   sub_5     2.64   6.816      2.2\n6   sub_6     5.28   4.391      7.1\n7   sub_7     3.46   0.070      9.9\n8   sub_8     0.77   8.778      5.6\n9   sub_9     4.78   7.170      8.8\n10 sub_10     3.32   0.055      8.9\n```\n:::\n:::\n\n\n\n## `purrr::map`\n\nNow you want to load everything in the same dataframe (i.e. table), for instance to carry out a RM-ANOVA. You could use a for loop to load all the files:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nallruns = vector(mode = \"list\", length = 8)\n\nfor (run in 1:length(allruns)) {\n  allruns[[run]] <- read.csv( myfiles[[run]] )\n}\n\n# allruns\n```\n:::\n\n\nOr you could use the `map` function inside the `purrr` package\n\n\n::: {.cell}\n\n```{.r .cell-code}\nallruns <- map(myfiles, read.csv)\n\n# allruns\n```\n:::\n\n\n**In other words you passed to every element of the list `myfiles` the function `read.csv`** \n\nNote the advantages:\n\n- you do not need to write extra code to initialize an empty list, since the result is automatically stored in a list\n- you don't need to provide the total number of files, \n- the syntax is much more concise (and when you get used to it, also much more readable).\n\n## `purrr::map2`\n\nTo carry out the RM-ANOVA, you need to combine all the tables into one singe dataframe, but also retain information about the different run. \n\nThe idea is the same as before: you have a function that creates a column with the run numba in each run's data table. This means that you want to provide _two_ lists: (1) the list containing the table of each run and (2) the list of filenames.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalldata <- map2(allruns, myfiles, function(run, file) run %>% mutate(run = file)) %>% bind_rows()\n```\n:::\n\n\nor with a more concise syntax:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalldata <- map2_df(allruns, myfiles, ~ .x %>% mutate(run = .y))\n```\n:::\n\n\nYou might have noticed that here I used a specific flavor of `map`, that is `map_df`, which returns a dataframe (or a `tibble` in the tidyverse language) instead of the default list, so that I can drop the final `bind_rows()`.\n\n## `purrr::pmap`\n\nAs you might expect, there is also a function `pmap` which allows you to pass an arbitrary number of tables. I personally prefer this syntax since it allows me to pipe the list into it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalldata <- list(allruns, myfiles) %>% pmap_df(~ .x %>% mutate(run = .y))\n\n\ndatatable(alldata, options = list(dom = 'tp', scrollX = TRUE)) %>%\n  DT::formatRound(\n    columns = alldata %>% select(where(is.numeric)) %>% colnames(), \n    digits=2\n  )\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-a0b109ff176439192f80\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-a0b109ff176439192f80\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"80\"],[\"sub_1\",\"sub_2\",\"sub_3\",\"sub_4\",\"sub_5\",\"sub_6\",\"sub_7\",\"sub_8\",\"sub_9\",\"sub_10\",\"sub_1\",\"sub_2\",\"sub_3\",\"sub_4\",\"sub_5\",\"sub_6\",\"sub_7\",\"sub_8\",\"sub_9\",\"sub_10\",\"sub_1\",\"sub_2\",\"sub_3\",\"sub_4\",\"sub_5\",\"sub_6\",\"sub_7\",\"sub_8\",\"sub_9\",\"sub_10\",\"sub_1\",\"sub_2\",\"sub_3\",\"sub_4\",\"sub_5\",\"sub_6\",\"sub_7\",\"sub_8\",\"sub_9\",\"sub_10\",\"sub_1\",\"sub_2\",\"sub_3\",\"sub_4\",\"sub_5\",\"sub_6\",\"sub_7\",\"sub_8\",\"sub_9\",\"sub_10\",\"sub_1\",\"sub_2\",\"sub_3\",\"sub_4\",\"sub_5\",\"sub_6\",\"sub_7\",\"sub_8\",\"sub_9\",\"sub_10\",\"sub_1\",\"sub_2\",\"sub_3\",\"sub_4\",\"sub_5\",\"sub_6\",\"sub_7\",\"sub_8\",\"sub_9\",\"sub_10\",\"sub_1\",\"sub_2\",\"sub_3\",\"sub_4\",\"sub_5\",\"sub_6\",\"sub_7\",\"sub_8\",\"sub_9\",\"sub_10\"],[3.4011366758397,6.48843566521008,2.95305357862275,4.72313499246414,2.64260958757053,5.28381693659369,3.46320431151653,0.76762992140351,4.78162305812257,3.32193009598833,4.60931699748131,4.73326391171503,2.3780904874262,9.22155924703111,2.4678757655644,7.20157356721117,3.83107415200304,5.39614749842688,1.4107097854349,1.72218807095252,13.3672071926749,0.73140349353819,5.00113368536678,2.66062935180229,9.26858089928373,5.26985396211289,6.92890737389861,5.15703646473572,8.73808870615428,12.9575822676658,6.99875967167467,13.3476816769027,12.5989969922192,11.0945696086625,12.5703625129628,12.9274980624316,8.3607395260764,4.32733096614659,14.6530639177375,12.651196107759,6.29756249267378,9.17205870001981,9.30406983058381,7.57343946738848,5.18347254686778,6.36296068024475,2.69746352543783,16.3145325965607,13.1103024281963,10.4823468880355,8.16257045886676,7.08062919590296,12.1670379329826,12.2788755280866,0.742264284307128,7.23429003301195,9.5751240156604,0.487303028990003,4.31123495162188,16.1851220023246,14.7089736880707,12.7755587584854,6.98262667329568,13.0803567024119,17.4592598831391,0.327310096217135,7.90818646010393,6.503266145411,15.3843293289208,2.08264307038201,13.1848790583612,19.5338894664435,15.5312471442609,10.719454830894,12.5433081649459,16.2870363194221,0.78166672808095,15.3203308918419,20.8424835082686,6.9993368451294],[0.4375716811046,5.87079590186477,7.87246332271025,0.677846220787615,6.81601390708238,4.39144222764298,0.0704542803578079,8.77773402025923,7.16952435439453,0.0549250957556069,6.38497195672244,4.73377856425941,2.16355736367404,6.47497531492263,8.20489735808223,9.0271425829269,3.95884178811684,6.91538900369778,9.99414820689708,5.31166377943009,4.42368328105658,1.78596482146531,5.82162475446239,2.29226673021913,7.88041441934183,6.55819539679214,5.09187562158331,0.147801134735346,8.87705173110589,4.73065614700317,0.322225939016789,7.81542438315228,2.43300284259021,2.35191146144643,7.79716263292357,1.7298289318569,5.52685029339045,0.894173085689545,4.80157654266804,4.9727012985386,3.54341879021376,7.91622116230428,2.36667416989803,4.97033288236707,6.29685611464083,8.32186800893396,3.10268935747445,1.16988268913701,2.87186071276665,8.44708358868957,7.11287268670276,3.45186794409528,2.17538298107684,6.68646332575008,6.48250237572938,4.44922719616443,7.76367812184617,8.52135447319597,7.51627895515412,7.38430230179802,5.20411782199517,0.338759822770953,5.85359782679006,4.29134434089065,7.10130726685748,1.93348787957802,3.38800661033019,0.323509217705578,5.06972956703976,3.464972875081,0.0711678084917367,1.66845539119095,0.1814254373312,3.92367530614138,1.98848174419254,7.30559095041826,0.290088520850986,6.9239424308762,4.83490854967386,5.4022579989396],[4.14216229924932,7.54404000937939,6.84020413085818,1.39223169069737,2.24569981219247,7.07554508699104,9.86450841883197,5.63727973494679,8.7632451299578,8.87572611449286,4.29937380831689,5.91079025296494,4.97356124455109,0.634471047669649,3.12642208533362,2.20119341043755,2.333705984056,1.62188650574535,3.1490033864975,7.73923483677208,0.532924584113061,7.1057243924588,6.31663215579465,9.79194186860695,8.77560822060332,5.3903559083119,9.56992176128551,2.52078700112179,7.2629084950313,6.40514291124418,4.72766963299364,2.46861225925386,0.382162700407207,4.32235054671764,3.18276479141787,1.18876566411927,0.672443027142435,5.47039763769135,7.20313180238008,2.94542240444571,8.52044506464154,4.7650606231764,1.51803885120898,0.41994476923719,3.56929210945964,6.74160211812705,7.94196165865287,4.04458222445101,2.31391055276617,4.2486177990213,4.30147458799183,1.52522269869223,7.25970088271424,7.71318293642253,5.07598906522617,3.43861329834908,5.33646534895524,0.961055676452816,3.16922561731189,5.34847740782425,8.70060466229916,5.22588062565774,6.0282482416369,7.16072104871273,4.00613696780056,1.35820852825418,8.75433868495747,8.70206022169441,9.0726479399018,4.56557129044086,4.56447152188048,9.14395817555487,8.71716638328508,1.7132331430912,7.20771770458668,7.86940339254215,8.30311376601458,0.0296343094669282,1.1419628164731,5.33177556470037],[\"./run_1.csv\",\"./run_1.csv\",\"./run_1.csv\",\"./run_1.csv\",\"./run_1.csv\",\"./run_1.csv\",\"./run_1.csv\",\"./run_1.csv\",\"./run_1.csv\",\"./run_1.csv\",\"./run_2.csv\",\"./run_2.csv\",\"./run_2.csv\",\"./run_2.csv\",\"./run_2.csv\",\"./run_2.csv\",\"./run_2.csv\",\"./run_2.csv\",\"./run_2.csv\",\"./run_2.csv\",\"./run_3.csv\",\"./run_3.csv\",\"./run_3.csv\",\"./run_3.csv\",\"./run_3.csv\",\"./run_3.csv\",\"./run_3.csv\",\"./run_3.csv\",\"./run_3.csv\",\"./run_3.csv\",\"./run_4.csv\",\"./run_4.csv\",\"./run_4.csv\",\"./run_4.csv\",\"./run_4.csv\",\"./run_4.csv\",\"./run_4.csv\",\"./run_4.csv\",\"./run_4.csv\",\"./run_4.csv\",\"./run_5.csv\",\"./run_5.csv\",\"./run_5.csv\",\"./run_5.csv\",\"./run_5.csv\",\"./run_5.csv\",\"./run_5.csv\",\"./run_5.csv\",\"./run_5.csv\",\"./run_5.csv\",\"./run_6.csv\",\"./run_6.csv\",\"./run_6.csv\",\"./run_6.csv\",\"./run_6.csv\",\"./run_6.csv\",\"./run_6.csv\",\"./run_6.csv\",\"./run_6.csv\",\"./run_6.csv\",\"./run_7.csv\",\"./run_7.csv\",\"./run_7.csv\",\"./run_7.csv\",\"./run_7.csv\",\"./run_7.csv\",\"./run_7.csv\",\"./run_7.csv\",\"./run_7.csv\",\"./run_7.csv\",\"./run_8.csv\",\"./run_8.csv\",\"./run_8.csv\",\"./run_8.csv\",\"./run_8.csv\",\"./run_8.csv\",\"./run_8.csv\",\"./run_8.csv\",\"./run_8.csv\",\"./run_8.csv\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>SUBID<\\/th>\\n      <th>freezing<\\/th>\\n      <th>running<\\/th>\\n      <th>grooming<\\/th>\\n      <th>run<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"dom\":\"tp\",\"scrollX\":true,\"columnDefs\":[{\"targets\":2,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 2, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":3,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 2, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":4,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 2, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"className\":\"dt-right\",\"targets\":[2,3,4]},{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[\"options.columnDefs.0.render\",\"options.columnDefs.1.render\",\"options.columnDefs.2.render\"],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\n## `map` is similar to `group_by` for dataframes\n\nFinally, note that the `map` function - and its variation, such as `pmap`, is a similar operator for list to the `group_by` operator inside dataframes.\n\nFor instance let's say that you want to get the mean and standard deviation for every variable in each run:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndescriptives <- alldata %>% \n  group_by(run) %>%\n  summarise(\n    across(where(is.numeric), list(mean = mean, sd = sd)),\n    .groups = \"drop\"\n  ) %>% ungroup() \n\n\ndescriptives %>% \n  kbl() %>% kable_styling(bootstrap_options = c(\"striped\", \"hover\"))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-hover\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> run </th>\n   <th style=\"text-align:right;\"> freezing_mean </th>\n   <th style=\"text-align:right;\"> freezing_sd </th>\n   <th style=\"text-align:right;\"> running_mean </th>\n   <th style=\"text-align:right;\"> running_sd </th>\n   <th style=\"text-align:right;\"> grooming_mean </th>\n   <th style=\"text-align:right;\"> grooming_sd </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> ./run_1.csv </td>\n   <td style=\"text-align:right;\"> 3.8 </td>\n   <td style=\"text-align:right;\"> 1.6 </td>\n   <td style=\"text-align:right;\"> 4.2 </td>\n   <td style=\"text-align:right;\"> 3.5 </td>\n   <td style=\"text-align:right;\"> 6.2 </td>\n   <td style=\"text-align:right;\"> 2.9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ./run_2.csv </td>\n   <td style=\"text-align:right;\"> 4.3 </td>\n   <td style=\"text-align:right;\"> 2.5 </td>\n   <td style=\"text-align:right;\"> 6.3 </td>\n   <td style=\"text-align:right;\"> 2.4 </td>\n   <td style=\"text-align:right;\"> 3.6 </td>\n   <td style=\"text-align:right;\"> 2.1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ./run_3.csv </td>\n   <td style=\"text-align:right;\"> 7.0 </td>\n   <td style=\"text-align:right;\"> 4.1 </td>\n   <td style=\"text-align:right;\"> 4.8 </td>\n   <td style=\"text-align:right;\"> 2.7 </td>\n   <td style=\"text-align:right;\"> 6.4 </td>\n   <td style=\"text-align:right;\"> 3.0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ./run_4.csv </td>\n   <td style=\"text-align:right;\"> 10.9 </td>\n   <td style=\"text-align:right;\"> 3.3 </td>\n   <td style=\"text-align:right;\"> 3.9 </td>\n   <td style=\"text-align:right;\"> 2.7 </td>\n   <td style=\"text-align:right;\"> 3.3 </td>\n   <td style=\"text-align:right;\"> 2.2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ./run_5.csv </td>\n   <td style=\"text-align:right;\"> 8.7 </td>\n   <td style=\"text-align:right;\"> 4.0 </td>\n   <td style=\"text-align:right;\"> 4.9 </td>\n   <td style=\"text-align:right;\"> 2.7 </td>\n   <td style=\"text-align:right;\"> 4.4 </td>\n   <td style=\"text-align:right;\"> 2.7 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ./run_6.csv </td>\n   <td style=\"text-align:right;\"> 7.8 </td>\n   <td style=\"text-align:right;\"> 5.0 </td>\n   <td style=\"text-align:right;\"> 6.2 </td>\n   <td style=\"text-align:right;\"> 2.1 </td>\n   <td style=\"text-align:right;\"> 4.4 </td>\n   <td style=\"text-align:right;\"> 2.2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ./run_7.csv </td>\n   <td style=\"text-align:right;\"> 9.7 </td>\n   <td style=\"text-align:right;\"> 5.8 </td>\n   <td style=\"text-align:right;\"> 3.7 </td>\n   <td style=\"text-align:right;\"> 2.3 </td>\n   <td style=\"text-align:right;\"> 6.4 </td>\n   <td style=\"text-align:right;\"> 2.6 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ./run_8.csv </td>\n   <td style=\"text-align:right;\"> 13.2 </td>\n   <td style=\"text-align:right;\"> 5.9 </td>\n   <td style=\"text-align:right;\"> 3.3 </td>\n   <td style=\"text-align:right;\"> 2.8 </td>\n   <td style=\"text-align:right;\"> 5.4 </td>\n   <td style=\"text-align:right;\"> 3.4 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.6.0/htmlwidgets.js\"></script>\n<link href=\"../../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/datatables-binding-0.26/datatables.js\"></script>\n<script src=\"../../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"../../site_libs/dt-core-1.12.1/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"../../site_libs/dt-core-1.12.1/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/dt-core-1.12.1/js/jquery.dataTables.min.js\"></script>\n<link href=\"../../site_libs/crosstalk-1.2.0/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/crosstalk-1.2.0/js/crosstalk.min.js\"></script>\n<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}